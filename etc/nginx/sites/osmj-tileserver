# This is a configuration for tile.openstreetmap.jp tileserver
#   Author: Hiroshi Miura
#   Release: 24 April, 2013
#   Last update: 15 May, 2013
#
server {
  listen 80;
  server_name j.tile.openstreetmap.jp tile.openstreetmap.jp;
  root   /opt/tileman/html;

  access_log  /var/log/nginx/tileserver_access.log combined;
  error_log   /var/log/nginx/tileserver_error.log info;

  include common_location_params;

  location / {
    access_by_lua '
      local osm_tile = require "osm.tile"
      local minz = 0
      local maxz = 18
      local x, y, z = osm_tile.get_cordination(ngx.var.uri, "", "png")
      local ok = osm_tile.check_integrity_xyzm(x, y, z, minz, maxz)
      if not ok then
        ngx.exit(ngx.HTTP_FORBIDDEN)
      end
      if ngx.var.own_tile == "no" then
        ngx.exec("@tileserver")
      end
    ';
    root /opt/tileman/tiles;
    try_files $uri $uri/ @tileserver;
  }

  location @tileserver {
    access_by_lua '
      local osm_tile = require "osm.tile"
      local osm_data = require "osm.data"
      local x, y, z = osm_tile.get_cordination(ngx.var.uri, "", "png")
      if z < 8 then -- low zoom use global site cache 
        ngx.exec("@tilecache")
      end
      local region = osm_data.get_region("japan")
      local inside = osm_tile.is_inside_region(region, x, y, z)
      if not inside then
         ngx.exec("@tilecache")
      end
    ';
    content_by_lua '
      -- required module
      local osm_tile = require "osm.tile"
      local tirex = require "osm.tirex"
      local math = require "math"
      local map = "custom"
      local x, y, z = osm_tile.get_cordination(ngx.var.uri, "", "png")
      -- try renderd file.
      local tilefile = osm_tile.xyz_to_metatile_filename(x, y, z)
      local tilepath = "/var/lib/tirex/tiles/"..map.."/"..tilefile
      local png, err = osm_tile.get_tile(tilepath, x, y, z)
      if png then
        ngx.header.content_type = "image/png"
        ngx.print(png)
        return ngx.OK
      end
      -- ask tirex to render it
      local priority = 1
      local maxz = math.min(18, z + 2)
      local ok = tirex.request(map, x, y, z, maxz, priority)
      if not ok then
         return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end
      local png, err = osm_tile.get_tile(tilepath, x, y, z)
      if png then
        ngx.header.content_type = "image/png"
        ngx.print(png)
        return ngx.OK
      end
      return ngx.exit(ngx.HTTP_NOT_FOUND)
    '; 
  }

  location @tilecache {
    include tileproxy_params;
    proxy_pass http://openstreetmap_backend;
  }
}
